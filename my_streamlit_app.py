# -*- coding: utf-8 -*-
"""my_streamlit_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IeUF6vGeSr-ugUiyqW3zKtBiMT-1FcuE
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


# Appel à set_page_config au début du script
st.set_page_config(layout='wide')

st.title('Vroum vroum, les voitures')
st.write("Les voitures ont 4 roues et roulent sur la route")

link = "https://raw.githubusercontent.com/murpi/wilddata/master/quests/cars.csv"
df = pd.read_csv(link)

df_final = pd.DataFrame()

option_A = st.checkbox("US")
option_B = st.checkbox("Japon")
option_C = st.checkbox("Europe")


if option_A:
    df_final = pd.concat([df_final, df[df['continent'] == ' US.']])
if option_B:
    df_final = pd.concat([df_final, df[df['continent'] == ' Japan.']])
if option_C:
    df_final = pd.concat([df_final, df[df['continent'] == ' Europe.']])

if option_A == False and option_B == False and option_C == False:
    df_final = df
    viz_correlation = sns.heatmap(df.corr(), cmap="coolwarm", center=0)
    st.pyplot(viz_correlation.figure)
else:
    viz_correlation = sns.heatmap(df_final.corr(), cmap="coolwarm", center=0)
    st.pyplot(viz_correlation.figure)






# 1) Calcul statistiques de base grâce à .describe()
df_final = df.describe(include='all').T

# 2) Affichage des valeurs nulles sur une colonne.
df_final['NAN'] = df.apply(lambda x: 'OUI' if pd.isna(x).any() else 'NON')

# 3) Calcul % de valeurs nulles : application d'un lambda pour calculer le pourcentage.
df_final['% NAN'] = df.apply(lambda x : (x.isna().sum() / len(x))*100)

# 4) Affichage des valeurs en doublons sur une colonne.
df_final['Duplicated'] = df.apply(lambda x: 'OUI' if x.duplicated().any() else 'NON')

# 5) Calcul % de valeurs en doublons : application d'un lambda pour calculer le pourcentage.
df_final['% Duplicated'] = df.apply(lambda x : (x.duplicated().sum() / len(x))*100)

# 6) Calcul nombre de valeurs uniques : application d'un lambda pour calculer le nombre de valeurs uniques.
df_final['Uniques'] = df.apply(lambda x : len(x.unique()))

# Heatmap


col_num = df.select_dtypes(include=['int', 'float'])

# On crée une boucle qui crée un graphique global contenant un sous-graphique de type boxplot pour chaque colonne numérique.
plt.figure(figsize=(8, 10))

for i, colonne in enumerate(col_num, 1):
        plt.subplot(len(df.columns), 1, i)
        viz_correlation = sns.boxplot(x=df[colonne])

        plt.title(colonne)

plt.tight_layout()
st.pyplot(viz_correlation.figure)

st.write(df_final, full_width=True)